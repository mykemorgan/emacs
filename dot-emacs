;; -*- emacs-lisp -*-
;;
;; mm ~/.emacs file.
;; --

;; ----------------------------------------------------------------------
;; Further Emacs setup to do (updated 2016-02-22)
;;
;; - web mode for html (including dust templates)
;; - javascript completion
;; - javascript refactoring
;; - JS tag mode package
;; - code folding (block hiding) (For JS supposedly js2-mode has this)
;; - auto-completion
;; - snippets (auto-insertion repeated keystrokes I think)
;; - Set up/use a real package manager so to not checkin other open source
;;   packages? (M-x list packages good enough?)
;;
;; - git package?
;; ----------------------------------------------------------------------

(setq load-path (cons (expand-file-name "~/emacs/") load-path))
(setq load-path (cons (expand-file-name "~/emacs/packages") load-path))

(cond ((string-match "XEmacs\\|Lucid" emacs-version)
       ;; Load gnuserv to let outside programs connect to xemacs.
       (gnuserv-start)
       (message "Looks like you went back to XEmacs. DID NOT LOAD old startup files. Better check that.")))

;; Always load the following libs
;; Think about needing to have all these 3rd party saved in my home dir...

;; RFC location package
(if (locate-library "RFC-find") 
    (load-library "RFC-find"))

;; mimimap package should be built in now?

;; mm-code-helpers contains most of the 'mm-XXX' elisp functions.
(if (locate-library "mm-code-helpers") 
    (load-library "mm-code-helpers"))

;; Then I was smart and put one "package" per file.
;; No need to fix and use this yet.
;; (if (locate-library "mm-find-header-at-point")
;;    (load-library "mm-find-header-at-point"))

(if (locate-library "mm-json-format-region") 
    (load-library "mm-json-format-region"))

;; Need js2 library before we install faces since we customize one of them
(if (locate-library "js2-mode")
    (load-library "js2-mode"))

;; Special library just for my faces, colors, fonts
(if (locate-library "mm-faces") 
    (load-library "mm-faces"))

(if (locate-library "python-mode") 
    (load-library "python-mode"))

;; Enable when we finish arguing about what settings to use...
;; (if (locate-library "prettier-js")
;;     (load-library "prettier-js"))

;;----------------------------------------------------------------------
;; Ugh: json-mode requires:
;; - 'js' (for js-mode)
;; - 'ex'
;; - 'json-reformat'
;; Missing the last.
;; js-mode comes with emacs 23.2 - need to update shell version?
;(if (locate-library "json-mode") 
;    (load-library "json-mode"))


; Generic stuff
(line-number-mode 1)
(column-number-mode 1)
(display-time)

; Key settings, some helpful stuff.
(global-set-key "\M-g"      'goto-line)
(global-set-key [(meta down)]    'goto-next-error)
(global-set-key [(meta up)]      'goto-prev-error)
(global-set-key "\M-n"	    'scroll-line-up)
(global-set-key "\M-p"	    'scroll-line-down)

;; Global key bindings from random times in the past.
;; Should wrap these in some sort of 'if not OSX' since these
;; Interfere with OSX Mission Control/Spaces, and might not work with the new touchbar either?
;
;; (global-set-key [f8]  'start-kbd-macro)
;; (global-set-key [f9]  'end-kbd-macro)
;; (global-set-key [f10] 'call-last-kbd-macro)
;; (global-set-key [f11] 'compile)
;
;; (global-set-key [f9]  'other-window)
;; (global-set-key [f10] 'other-frame)
;; (global-set-key [f11] (lambda () (interactive) (tags-apropos (current-word))))
;; (global-set-key [f12] (lambda (tag) (interactive "sApropos tag: ") (tags-apropos tag)))

;; Set up file type recognition
(setq auto-mode-alist (mapcar 'purecopy
                              '(("\\.aml$" . sgml-mode)
                                ("\\.cml$" . sgml-mode)
                                ("\\.sml$" . sgml-mode)
                                ("\\.xml$" . sgml-mode)
                                ("\\.uil$" . c-mode)
                                ("\\.uih$" . c-mode)
                                ("\\.c$" . c-mode)
                                ("\\.h$" . c++-mode)
                                ("\\.hpp$" . c++-mode)
                                ("\\.cc$" . c++-mode)
                                ("\\.cpp$" . c++-mode)
                                ("\\.ndl$" . c++-mode)
                                ("\\.twiki$" . twiki-mode)
                                ("\\.tmpl$" . html-mode)
                                ("\\.i$" . c++-mode)
                                ("\\makefile$" . makefile-mode)
                                ("\\Makefile$" . makefile-mode)
                                ("\\Makefile.e$" . makefile-mode)
                                ("\\Makefile.*\\.inc$" . makefile-mode)
                                ("\\.java$" . java-mode)
                                ("\\.html$" . html-mode)
                                ("\\.tex$" . TeX-mode)
                                ("\\.txi$" . Texinfo-mode)
                                ("\\.el$" . emacs-lisp-mode)
                                ("\\.py$" . python-mode)
                                ("\\.pig$" . sql-mode)
                                ("\\.json$" . js-mode)
                                ("\\.js$" . js2-mode)
                                ("\\.css$" . css-mode)
                                ("\\.sql$" . sql-mode)
                                ("\\.a$" . c-mode))))


;; Add my indentation style preferences and frame decorations.
(defun myke-common-hook ()
  ;; use bsd style for all C like languages
;  (c-set-style "bsd")
  ;; See: mm-code-helpers for old tabs+spaces indentation style.
;  (c-set-style "mm-tabs-and-spaces")
;  (setq tab-width 4)
  ;; This makes tab only indent when at begin of non-whitespace.
  ;; Useful for aligning parameters.
  (setq c-tab-always-indent nil)

  (define-key c++-mode-map "\C-m" 'newline-and-indent)
  (define-key c-mode-map "\C-m"   'newline-and-indent)
  (define-key c++-mode-map "\C-c\C-s" 'mm-c-insert-ifdef)
  (define-key c-mode-map "\C-c\C-s"   'mm-c-insert-ifdef)
  (define-key c++-mode-map "\C-\M-y" 'mm-yank-and-indent)
  (define-key c-mode-map "\C-\M-y"   'mm-yank-and-indent)

  (font-lock-mode 1)
  )

 (defun myke-c-mode-hook ()
;; ;; C work (typically kernel code) requires using tabs and special indentations.
;;   (c-set-offset 'arglist-cont-nonempty '*)
;;   (c-set-offset 'arglist-cont '*)
;;   (c-set-offset 'statement-cont '*)
   )

(defun myke-c++-mode-hook ()
  ;; other customizations can go here

  ;; Make the offset the current tab width instead of some fixed
  ;; number of spaces. This is an attempt to be a good citizen living
  ;; in a "using tabs not spaces" environment.  Logic being, indent
  ;; always is a tab-multiple, and so there should never be necessary
  ;; spaces to make things look odd in different tab widths.
;; (setq c-basic-offset tab-width
;; 	;; Make sure tabs are used instead of spaces (nil to force no tabs)
;; 	indent-tabs-mode t)

  ;; Don't try to line up arguments under other arguments (like C-mode).
  ;; This is because in a tab-environment, this will make things look
  ;; hokey because the odd distance indent uses some spaces, and some
  ;; people use different tab-widths... *double sigh*

;  (c-set-offset 'arglist-cont-nonempty '+)
;  (c-set-offset 'arglist-cont '+)
;  (c-set-offset 'statement-cont '+)
  )

(defun myke-xml-mode-hook ()
  (auto-fill-mode 0)

  (setq tab-width 4)
  ;; This makes tab indent the line even mid-line.
  (setq c-tab-always-indent t)
  (define-key sgml-mode-map "\C-\M-y" 'mm-yank-and-indent)
  (setq c-basic-offset tab-width
	;; Make sure tabs are used instead of spaces (nil to force no tabs)
	indent-tabs-mode nil)
  )

;; Generic JavaScript settings
(defun myke-js-mode-hook ()
  (font-lock-mode 1)
  (setq indent-tabs-mode nil)
  (setq tab-width 2)
  (define-key js-mode-map "\C-c\C-c" 'comment-region) ;; Haha - use M-; !
  (define-key js-mode-map "\C-\M-y" 'mm-yank-and-indent)

  ;; Try a simple auto-balancing of bracket-type things
  (define-key js-mode-map "(" (lambda () (interactive) (mm-insert-balanced ?\()))
  (define-key js-mode-map "[" (lambda () (interactive) (mm-insert-balanced ?\[)))
  (define-key js-mode-map "<" (lambda () (interactive) (mm-insert-balanced ?\<)))
  (define-key js-mode-map "{" (lambda () (interactive) (mm-insert-balanced ?\{)))

  ;; Tried this once globally, didn't work for C++. Let's see if it works better with specific types
  ;; Still has a little trouble with exiting JS functions in functions.
  ;; It thinks it's always in the previously defined functions. (it's just looking backwards for def)
  ;; Once inner function closes, does not revert to the enclosing function.
  (which-function-mode)
  )

;; JS2 mode specific things only. Having trouble setting this
;; elsewhere in generic places because it requires the js2-mode lib to
;; be loaded. Even putting the first face setting call after loading
;; the lib it's not working. Maybe I'm crazy?
(defun myke-js2-mode-hook ()
  (set-face-foreground  'js2-function-param "SeaGreen3")
  )

; Since coding standards could be different, use two different styles
; for c and c++ *sigh*
(add-hook 'c-mode-common-hook 'myke-common-hook)
(add-hook 'c-mode-hook 'myke-c-mode-hook)
(add-hook 'c++-mode-hook 'myke-c++-mode-hook)
(add-hook 'python-mode-hook 'myke-python-mode-hook)
(add-hook 'sgml-mode-hook 'myke-xml-mode-hook)
(add-hook 'js-mode-hook 'myke-js-mode-hook)
(add-hook 'js2-mode-hook 'myke-js-mode-hook)
(add-hook 'js2-mode-hook 'myke-js2-mode-hook)

;; elisp mode customizations and bindings
(defun myke-elisp-hook ()
  (setq tab-width 4)
  (setq indent-tabs-mode nil)
  (define-key emacs-lisp-mode-map "\r" 'reindent-then-newline-and-indent)
  (define-key emacs-lisp-mode-map "\C-c\C-c" 'comment-region) ;; Haha - use M-; !
  (define-key emacs-lisp-mode-map "\C-\M-y" 'mm-yank-and-indent)
  (font-lock-mode 1)
  (which-function-mode)
)
(add-hook 'emacs-lisp-mode-hook 'myke-elisp-hook)

;; Other way to do it:
(add-hook 'lisp-mode-hook '(lambda () 
                             (font-lock-mode 1)
                             (setq indent-tabs-mode nil)))
(add-hook 'html-mode-hook '(lambda () 
                             (font-lock-mode 1)
                             (setq tab-width 4)
                             (setq indent-tabs-mode nil)
                             (define-key html-mode-map "\C-\M-y" 'mm-yank-and-indent)))
(add-hook 'sgml-mode-hook '(lambda () 
                             (font-lock-mode 1)
                             (setq indent-tabs-mode nil)
                             (setq tab-width 4)))
(add-hook 'java-mode-hook '(lambda () 
                             (font-lock-mode 1)
                             (setq indent-tabs-mode nil)
                             (define-key java-mode-map "\C-\M-y" 'mm-yank-and-indent)))

;; No auto-fill for twiki pages.
(defun twiki-mode ()
  (auto-fill-mode 0))

(defun myke-python-mode-hook ()
  (setq indent-tabs-mode nil)
  (font-lock-mode 1)
  (setq tab-width 4)
  (setq python-indent-offset 4)
  (define-key python-mode-map "\C-\M-y" 'mm-yank-and-indent)
  (define-key python-mode-map "\C-c\C-c" 'comment-region) ;; Haha - use M-; !
  )

(add-hook 'text-mode-hook 'turn-on-auto-fill)

(setq default-major-mode 'text-mode)

;; Autorevert package: Loads files that have been changed on disk.
;; 2018-11-07 - No longer need to load, comes built in
;; (if (locate-library "autorevert")
;;     (load-library "autorevert"))
;; (autoload 'auto-revert-mode "autorevert" nil t)
;; (autoload 'turn-on-auto-revert-mode "autorevert" nil nil)
;; (autoload 'global-auto-revert-mode "autorevert" nil t)
;; (global-auto-revert-mode 1)

;; Fill properly using the following. 
;; Also see M-x apropos RET adaptive-fill RET
;;(setq adaptive-fill-mode t)

(custom-set-variables
 '(ediff-package t)
 '(c-support-package t)
 '(c-indent-comments-syntactically-p t)
 '(toolbar-mail-reader (quote not-configured))
 '(compile-command "bazel build ")
 '(query-user-mail-address nil))

; Turn on the mouse wheel
(mouse-wheel-mode)

;; Require a final newline in a file, to avoid confusing some tools
(setq require-final-newline t)

;; ----------------------------------------------------------------------
;; igrep stuff:
;; There's more functions in igrep but only seem to use this one
;; ----------------------------------------------------------------------
(autoload 'igrep-visited-files "igrep"
   "*Run `grep` ... on all visited files." t)

;; Project specific helper stuff
(if (locate-library "mm-project-helpers") 
    (load-library "mm-project-helpers"))

;; Markdown mode package
;; emacs v22.1.1 seems to have trouble with the keyword ":safe" used in markdown.
;; Markdown package says it's mostly tested on v24 and higher.
;; Yet another reason to upgrade the command-line emacs.
(when (>= emacs-major-version 24)
    (if (locate-library "markdown-mode")
        (load-library "markdown-mode"))

    ;; From: http://web-mode.org/ - For JSX and other template mixed-mode files
    ;; This is flakey for older emacsen? Like 22.1.1 I have on the console?
    (if (locate-library "web-mode")
        (load-library "web-mode"))

    (add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))
    (add-hook 'web-mode-hook '(lambda ()
                                (font-lock-mode 1)
                                (setq tab-width 4)
                                (setq indent-tabs-mode nil)))

    (autoload 'markdown-mode "markdown-mode" "Major mode for editing Markdown files" t)

    (add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.md\\'" . gfm-mode)) ; GitHub markdown
  )


;; ----------------------------------------------------------------------
;; Desktop package for restoring buffers on startup.
;; For now, needs to be activated manually to save, and
;; to restore need to load desktop file and execute buffer.
;;
;; Do this last, since we want everything else loaded before files begin
;; being loaded to get correct modes and whatnot.
; See:
; http://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Emacs-Sessions.html
;
; Be careful about turning it on universally because then every time
; EDITOR is invoked (i.e. on commits), it will load everything.
(if (locate-library "desktop")
    (load-library "desktop"))

;; Works in at least as low as v22, but maybe don't want to
;; auto-save the desktop every time we launch for a commit message?
;; Quick solve: launching with "% emacs --no-desktop" doesn't load desktop.
;; Unfortunately it still seems to save it? So have to gate it here.
(when (>= emacs-major-version 26)
  (desktop-save-mode 1) ; Desktop auto-save on exit, auto-load on start
  )

;; Below all from Manual Sec. 43 "Saving Emacs Sessions" emacs v24.4.1
;;
;; desktop-revert     - goes back to a previous desktop.
;; desktop-clear      - removes "all" buffers from desktop.
;; desktop-change-dir - can be used to move to another desktop by dir.
;; Basically loads the .emacs.desktop from given dir.
;; Would be nice to be able to launch emacs from known dir.
;; But on a non-command line this is tricky?
;; DESKTOP-PATH specifies the directories to search when starting up.
;; The first desktop file it finds is then used on startup.
;; ----------------------------------------------------------------------
